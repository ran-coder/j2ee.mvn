package utils.apache.log;

import java.io.*;

//Program converts HTTP server logs from W3C format to CLF (NCSA + 2).
//See README.TXT file in EXNC1.ZIP for more details.
//Author: www.prosperosoftware.co.uk
//Version 1.0. 30th June 1999.
//This program offered 'as-is' with no guarantees as to functionality,
//performance, ability to feed your cat while you are away on holiday
//etc. etc. - usual disclaimers.
//Compiled using JDK version 1.1.7B
//Example usage: C:>java exnc1 ex990624.log cl990624.log
public class Exnc {
	// Define sequence of tokens in input W3C log
	// NOTE: This is sequence in log generated by Microsoft
	// Internet Information Server 4.0. In this program,
	// this sequence is hard-coded. If sequence in your W3C
	// log is different, change numeric values (0-19) below
	// and recompile.
	public static int		W3C_DATE			=0;
	public static int		W3C_TIME			=1;
	public static int		W3C_C_IP			=2;
	public static int		W3C_CS_USERNAME		=3;
	public static int		W3C_S_SITENAME		=4;
	public static int		W3C_S_COMPUTERNAME	=5;
	public static int		W3C_S_IP			=6;
	public static int		W3C_CS_METHOD		=7;
	public static int		W3C_CS_URI_STEM		=8;
	public static int		W3C_CS_URI_QUERY	=9;
	public static int		W3C_SC_STATUS		=10;
	public static int		W3C_SC_WIN32_STATUS	=11;
	public static int		W3C_SC_BYTES		=12;
	public static int		W3C_CS_BYTES		=13;
	public static int		W3C_TIME_TAKEN		=14;
	public static int		W3C_S_PORT			=15;
	public static int		W3C_CS_VERSION		=16;
	public static int		W3C_CS_USERAGENT	=17;
	public static int		W3C_CS_COOKIE		=18;
	public static int		W3C_CS_REFERRER		=19;
	// Maximum number of space-delimited tokens in input W3C log
	public static int		vals_max			=50;
	// Array of tokens (trimmed) in input W3C log
	public static String[]	vals;
	// Constant array for months of year
	public static String[]	mons				=new String[12];

	public static void runInConsole(String[] args) throws Exception{
		if(args.length < 2){
			System.out.println("Requires 2 parameters: input log (W3C format) and output log (CLF format)");
			return;
		}
		mons[0]="Jan";
		mons[1]="Feb";
		mons[2]="Mar";
		mons[3]="Apr";
		mons[4]="May";
		mons[5]="Jun";
		mons[6]="Jul";
		mons[7]="Aug";
		mons[8]="Sep";
		mons[9]="Oct";
		mons[10]="Nov";
		mons[11]="Dec";
		// Establish input/output files
		String p1=args[0];
		String p2=args[1];
		File Input=new File(p1);
		File Output=new File(p2);
		// Reader for input, writer for output
		BufferedReader In=new BufferedReader(new FileReader(Input));
		BufferedWriter Out=new BufferedWriter(new FileWriter(Output));
		String InString;
		// Process all input W3C lines
		while((InString=In.readLine()) != null){
			InString=InString.trim();
			if(InString.length() > 0){
				// Ignore comment lines prefixed #
				if(InString.charAt(0) != '#'){
					// Write output CLF line
					String OutString=convert(InString);
					if(OutString != null && OutString.length() > 0){
						Out.write(OutString,0,OutString.length());
						Out.newLine();
						Out.flush();
					}
				}
			}
		}
		In.close();
		Out.close();
	}
	
	// Main function
	public static void main(String[] args) throws Exception {
		//java exnc1 ex990604.log nc990604.log
		runInConsole(new String[]{"D:/Apache/apache2215-crm/logs/access_log_20100702","c:/nc.log"});
	}

	// Return String for input line converted from W3C to CLF
	public static String convert(String in) {
		// Reinitialise arrays for each input line
		vals=null;
		vals=new String[vals_max];
		int curpos=0;
		int curfield=0;
		String cur;
		// Parse space-delimited input line
		int nextpos=in.indexOf((int)(' '),curpos);
		// Get tokens up to last (space after)
		while(nextpos > 0){
			cur=in.substring(curpos,nextpos);
			curfield=extract(cur,curfield);
			curpos=nextpos + 1;
			nextpos=in.indexOf((int)(' '),curpos);
		}
		// Get last token (no final space at end)
		cur=in.substring(curpos);
		curfield=extract(cur,curfield);
		System.out.println(curfield);
		// Reformat entire line
		String out=reformat();
		return (out);
	}

	// Extract token
	public static int extract(String val, int curfield) {
		val=val.trim();
		if(val.length() > 0 && curfield < vals_max){
			vals[curfield]=val;
			curfield++;
		}
		return (curfield);
	}

	// Reformat W3C line to CLF
	public static String reformat() {
		StringBuffer out=new StringBuffer(0);
		// host: output 1st
		if(vals[W3C_C_IP] != null && vals[W3C_C_IP].length() > 0) out.append(vals[W3C_C_IP] + " ");
		else out.append("- ");
		// ident and authuser ignored: output 2nd & 3rd positions
		out.append("- - ");
		// date/time: output 4th position
		// Note: Zone portion ignored - always 0000
		out.append("[" + getDate(vals[W3C_DATE]) + ":" + getString(vals[W3C_TIME]) + " +0000] ");
		// request: output 5th position
		out.append("\"" + getString(vals[W3C_CS_METHOD]) + " " + getString(vals[W3C_CS_URI_STEM]) + " "
				+ getString(vals[W3C_CS_VERSION]) + "\" ");
		// status: output 6th position
		if(vals[W3C_SC_STATUS] != null && vals[W3C_SC_STATUS].length() > 0) out.append(vals[W3C_SC_STATUS] + " ");
		else out.append("- ");
		// bytes: output 7th position
		// Note: this count may not agree exactly between the two
		// log formats (headers counted differently ?)
		if(vals[W3C_SC_BYTES] != null && vals[W3C_SC_BYTES].length() > 0) out.append(vals[W3C_SC_BYTES] + " ");
		else out.append("- ");
		// referrer: output 8th position
		if(vals[W3C_CS_REFERRER] == null || vals[W3C_CS_REFERRER].length() == 0
				|| vals[W3C_CS_REFERRER].compareTo("-") == 0) out.append("- ");
		else out.append("\"" + vals[W3C_CS_REFERRER] + "\" ");
		// useragent: output 9th position
		if(vals[W3C_CS_USERAGENT] == null || vals[W3C_CS_USERAGENT].length() == 0
				|| vals[W3C_CS_USERAGENT].compareTo("-") == 0) out.append("-");
		else out.append("\"" + vals[W3C_CS_USERAGENT] + "\"");
		return (out.toString());
	}

	// Reformat date from CCYY-MM-DD to DD/Mon/CCYY
	public static String getDate(String in) {
		if(in == null) return ("");
		in=in + "00000000000";
		StringBuffer out=new StringBuffer(0);
		out.append(in.substring(8,10) + "/");
		int mon=new Integer(in.substring(5,7)).intValue();
		if(mon >= 0 && mon <= 11) out.append(mons[mon - 1] + "/");
		else out.append("XXX/");
		out.append(in.substring(0,4));
		return (out.toString());
	}

	// Ensure non-null String returned
	public static String getString(String in) {
		if(in == null) return ("");
		return (in);
	}
}